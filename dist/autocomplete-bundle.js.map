{"version":3,"file":"autocomplete-bundle.js","sources":["../src/source.ts","../src/utility.ts","../src/index.ts","../src/plugin.ts"],"sourcesContent":["import \"./styles/source.scss\"\r\nexport class source {\r\n    options: PluginOptions;\r\n    parentElement: HTMLElement;\r\n    dropdownElement: HTMLElement;\r\n    element!: HTMLDivElement;\r\n    search!: HTMLInputElement;\r\n    source!: HTMLUListElement;\r\n    constructor(options: PluginOptions, parent: any) {//autoComplete\r\n      this.options = options;\r\n      this.parentElement = parent.element;\r\n      this.dropdownElement = parent.dropdownelement;\r\n      this.OnCreate();\r\n    }\r\n    OnCreate() {\r\n      this.parentElement.setAttribute(\"class\", \"autocomplete open\");\r\n      this.element = document.createElement('div');\r\n      this.element.id = this.parentElement.id + \"source\";\r\n      this.element.setAttribute(\"class\", \"autocomplete-container\");\r\n      var top = (this.parentElement.offsetTop + this.parentElement.offsetHeight) + \"px\";\r\n      this.element.setAttribute(\"style\", \"top:\" + top);\r\n\r\n      this.search = document.createElement(\"input\");\r\n      this.search.setAttribute(\"class\", \"search\");\r\n      this.search.addEventListener(\"keyup\", (e: Event) => { this.search_values(e.target), e.stopPropagation() });\r\n      this.search.addEventListener(\"click\", (e: Event) => e.stopPropagation());\r\n\r\n      this.element.appendChild(this.search);\r\n\r\n      this.source = document.createElement(\"ul\");\r\n      \r\n      for (var dataIndex = 0; dataIndex < this.options.data.length; dataIndex++) {\r\n        let valueElement: HTMLLIElement = document.createElement(\"li\");\r\n        let elementData:any = this.options.data[dataIndex];\r\n\r\n        let valueField = this.options.valueFiled as keyof typeof elementData;\r\n        let displayField = this.options.displayField as keyof typeof elementData;\r\n\r\n        let value:any = elementData[valueField];\r\n        let display:any = elementData[displayField];\r\n        valueElement.setAttribute(\"data-value\",value);\r\n        valueElement.setAttribute(\"data-display\", display);\r\n\r\n        valueElement.textContent = display;\r\n        if (this.dropdownElement.dataset.value == value) {\r\n          valueElement.setAttribute(\"class\", \"active\");\r\n        }\r\n        valueElement.addEventListener(\"click\", (e: Event) => this.onSelectValue(e.target));\r\n        this.source.appendChild(valueElement);\r\n      }\r\n      this.element.appendChild(this.source);\r\n      /*if (document.getElementsByClassName(\"autocomplete-container\").length > 0) {\r\n        document.querySelector(\".autocomplete-container\").remove();\r\n      }*/\r\n      document.getElementsByTagName(\"body\")[0].appendChild(this.element);\r\n      if (this.source.getElementsByClassName(\"active\").length == 1) {\r\n        this.source.getElementsByClassName(\"active\")[0].scrollIntoView();\r\n      } else {\r\n        this.search.focus();\r\n      }\r\n\r\n    }\r\n    destroy() {\r\n      var searchCollection = this.source.children;\r\n      for (var index = 0; index < searchCollection.length; index++) {\r\n        //removeEvent(searchCollection[index],\"*\");\r\n      }\r\n      //removeEvent(context.search,\"*\");\r\n      this.element.remove();\r\n      this.parentElement.setAttribute(\"class\", \"autocomplete\");\r\n    }\r\n    onSelectValue(el: any) {\r\n      var selectedValue = el.dataset.value;\r\n      var selectedText = el.dataset.display;\r\n      this.dropdownElement.setAttribute(\"data-value\", selectedValue);\r\n      this.dropdownElement.setAttribute(\"data-display\", selectedText);\r\n      this.dropdownElement.textContent = selectedText;\r\n      this.destroy();\r\n      if (this.options.onSelect != null) {\r\n        this.options.onSelect(selectedText, selectedValue);\r\n      }\r\n    }\r\n    search_values(el: any) {\r\n      let searchstring: string = el.value;\r\n      let searchCollection: any = this.source.children;\r\n      if (searchstring !== \"\") {\r\n        searchstring = searchstring.toLowerCase();\r\n        for (var index = 0; index < searchCollection.length; index++) {\r\n          var data = searchCollection[index].dataset.display;\r\n          if (data.toString().trim().toLowerCase().indexOf(searchstring) == -1) {\r\n            searchCollection[index].style.display = \"none\";\r\n          } else {\r\n            searchCollection[index].style.display = \"block\";\r\n          }\r\n        }\r\n      } else {\r\n        for (var index = 0; index < searchCollection.length; index++) {\r\n          searchCollection[index].style.display = \"block\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  ","export class utility {\r\n    static hasClass(el: HTMLElement, className: string) {\r\n      return el.classList ? el.classList.contains(className) : new RegExp(\"\\\\b\" + className + \"\\\\b\").test(el.className);\r\n    }\r\n  \r\n  }","import \"./styles/index.scss\"\n\nimport { source } from \"./source\";\nimport { utility } from \"./utility\";\n\n/** Index class */\nexport class Index {\n  options: PluginOptions;\n  parentElement: HTMLElement;\n  element!: HTMLDivElement;\n  dropdownelement!: HTMLSpanElement;\n  arrowElement!: HTMLDivElement;\n  sourceObj!: source;\n  constructor(options: PluginOptions) {\n    this.options = options;\n    this.parentElement = this.options.selector;\n    this.OnCreate();\n    document.addEventListener(\"click\", (e: Event) => {\n      if (this.sourceObj != null) {\n        this.sourceObj.destroy()\n      }\n    });\n  }\n  OnCreate() {\n    this.element = document.createElement('div') as HTMLDivElement;\n    this.element.id = \"autocomplete\" + new Date().getTime();\n    this.element.setAttribute(\"class\", \"autocomplete\");\n    this.parentElement.appendChild(this.element);\n\n    this.dropdownelement = document.createElement('span');\n    this.dropdownelement.textContent = this.options.placeholder;\n    this.element.appendChild(this.dropdownelement);\n\n    this.arrowElement = document.createElement('div');\n    this.arrowElement.setAttribute(\"class\", \"arrow\");\n\n    this.element.addEventListener(\"click\", (e: Event) => {\n      if (utility.hasClass(this.element, \"open\") == false) {\n        this.sourceObj = new source(this.options, this);\n      } else {\n        this.sourceObj.destroy();\n      }\n      e.stopPropagation();\n    });\n    this.element.appendChild(this.arrowElement);\n\n  }\n  getValue() {\n    return this.dropdownelement.dataset.value;\n  }\n  setValue(value: string) {\n    for (var dataIndex = 0; dataIndex < this.options.data.length; dataIndex++) {\n      let elementData: any = this.options.data[dataIndex];\n\n      let valueField = this.options.valueFiled as keyof typeof elementData;\n      let displayField = this.options.displayField as keyof typeof elementData;\n\n      let elementValue: any = elementData[valueField];\n      let elementDisplay: any = elementData[displayField];\n\n      if (value == elementValue) {\n        this.dropdownelement.setAttribute(\"data-value\", elementValue);\n        this.dropdownelement.setAttribute(\"data-display\", elementDisplay);\n        this.dropdownelement.textContent = elementDisplay;\n        break;\n      }\n    }\n\n  }\n}\n","import $ from 'jquery';\nimport { Index } from './index';\n\n// Define the plugin function on the jQuery extension point.\n// Note: Function and global default options must be combined as long as the options are mandatory.\n$.fn.AutoComplete = Object.assign<PluginFunction, PluginGlobalOptions>(\n  function (this: JQuery, options: PluginOptions): any {\n    if (!options) {\n      console.error('Auto Complete plugin options are missing required parameter \"selector\": ', JSON.stringify(options));\n      return null;\n    }\n\n    // Merge the global options with the options given as argument.\n    options = Object.assign({}, $.fn.AutoComplete.options, options);//$.extend({}, $.fn.AutoComplete.options, options);\n    options.selector=this[0] as HTMLElement;\n    // Check if required options are missing.\n    \n    // Do what the plugin should do. Here we create an instance of the separate service which is then used when the\n    // user clicks the element that the plugin is attached to. It produces a greeting message and appends it to the output.\n    let instance = new Index(options);\n\n    // Return the jQuery object for chaining.\n    return instance;\n\n  },\n  // Define the global default options.\n  {\n    options: {\n      selector: null,\n      data: [\"\",\"\"],\n      valueFiled: \"valueFiled\",\n      displayField: \"displayField\",\n      placeholder: \"Select an option\",\n      onSelect: null\n    }\n  }\n);\n"],"names":[],"mappings":";;;;;;;IACM,MAAO,MAAP,CAAa;IAaf,EAAA,WAAA,QAAA,QAAA;;;;;;;cAMM,GAAA;;;qBAIO,6BAAoC;qBACpC;eAEN;qBAEM,+BAA+B;8BAGxB;;;;;qCAIO,UAAS;;;;;6BASJ,SAAS,aAAT,KAAA;;cAG5B;;IAMF,eAAS,0BAAT;IACA,UAAI,mCAAJ;kDACqC;;;;;;;;IAOrC,MAAA,6BAAA,QAAA,mCAAA;IACA,WAAK,MAAL,YAAA,aAAA;;;;8CAQoC;;+CACC;IACrC,WAAK,MAAL,uBAAA,SAAA,GAAA,EAAgD,cAAhD;eACK;IACL,WAAK,MAAL,MAAA;;;;;;;sBAMmB;;;;;;wBAON;uCACU;;;;;;;;eAKhB;;;;;;;;;;;;;;;;;;;;;;;;;;;IA9FM;;ICDb,MAAO,OAAP,CAAc;IACD,SAAR,QAAQ,CAAC,EAAD,WAAA;iBACN,aAAa,EAAE,UAAF,SAAA,UAAA,IAAmC,UAAA,0BAAA,EAAsC,IAAtC,GAA6C,UAA7C;IACxD;;IAHe;;UCeX;;IAQP,gBAAA,UAAA;;;gBAGM,CAAC;;IAGL,aAAK,SAAL,QAAA;;;;;;;;kCASkB;;;;iCAIC;oCAEK,CAAC;IAE3B,qBAAA,aAAA,QAAA,SAAA;+CAEsC,CAAD;;iBAE5B;iBACF;;;;;;;;;;oBAYD;;;;aAGH;;;;;;;;;;;;;;;;;;4CCzDa,aAAA;IAId,cAAA;sBACgB;;;;;cAeV,WAAQ,MAAA;;;KApBA;;;;;;;;;KAAA;;;;;;"}